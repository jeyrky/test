--[[
UI 2 NÚT: THẢ / THU (THU = PICK UP)
- THẢ: cầm tool rồi đặt (giữ như code cũ)
- THU : Pick up các pet đã đặt trong vườn
]]

-- ===== CẤU HÌNH =====
getgenv().CFG = {
    -- THẢ
    PET_KEYWORD = "Moon Cat",
    MAX_TO_PLACE = 7,
    BETWEEN_EACH = 0.08,
    TRY_ACTIVATE = true,
    TRY_FIRE_REMOTE_CHILDREN = true,
    TRY_CLICK_TAP = true,
    CLICK_FORWARD_STUDS = 6,

    -- THU (PICK UP)
    PICKUP_KEYWORD = "Moon Cat",                 -- chuỗi khớp tên object pet đã đặt
    MAX_TO_PICK = 7,                              -- nhặt tối đa
    PICKUP_RADIUS = 40,                           -- bán kính quét quanh người
    MOVE_CLOSE = true,                            -- tự đi lại gần để nhặt
    MOVE_DISTANCE = 6,                            -- đứng cách ~6 studs rồi nhặt
    BETWEEN_PICK = 0.08,                          -- delay ngắn giữa mỗi lần nhặt

    -- Ưu tiên thứ tự nhặt:
    PICKUP_REMOTE_PATH = "ReplicatedStorage.Remotes.PickUpPet", -- nếu game có remote PickUp
    USE_PROXIMITY_PROMPT = true,                  -- dùng ProximityPrompt "Pick up"
    USE_CLICKDETECTOR = true,                     -- dùng ClickDetector nếu có
    USE_SCREEN_CLICK = true,                      -- bắn chuột vào vật thể (dự phòng)

    -- (tùy chọn) remote thu hàng loạt, nếu game có:
    RECALL_BANG_REMOTE = false,
    RECALL_REMOTE_PATH = "ReplicatedStorage.Remotes.RecallAllPets",
}

-- ===== SERVICES =====
local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local VIM = game:GetService("VirtualInputManager")
local LP = Players.LocalPlayer
local Character = LP.Character or LP.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local HRP = Character:WaitForChild("HumanoidRootPart")
local Backpack = LP:WaitForChild("Backpack")
local PlayerGui = LP:WaitForChild("PlayerGui")

local function waitx(t) task.wait(t or 0) end

local function byPath(pathStr)
    if not pathStr or pathStr=="" then return nil end
    local n = game
    for seg in string.gmatch(pathStr,"[^%.]+") do
        n = n:FindFirstChild(seg)
        if not n then return nil end
    end
    return n
end

local function nameMatch(s, key)
    s = string.lower(s or "")
    key = string.lower(key or "")
    return string.find(s, key, 1, true) ~= nil
end

local function screenCenter()
    local cam = workspace.CurrentCamera
    local vp = cam.ViewportSize
    return vp.X/2, vp.Y/2
end

local function worldToScreen(pos)
    local cam = workspace.CurrentCamera
    local v2, onScreen = cam:WorldToViewportPoint(pos)
    return Vector2.new(v2.X, v2.Y), onScreen
end

local function clickAtScreen(x, y)
    if UIS.TouchEnabled and not UIS.MouseEnabled then
        VIM:SendTouchEvent(x, y, 1, true); VIM:SendTouchEvent(x, y, 1, false)
    else
        VIM:SendMouseButtonEvent(x, y, 0, true, game, 0)
        VIM:SendMouseButtonEvent(x, y, 0, false, game, 0)
    end
end

-- ========= THẢ =========
local function equipTool(tool)
    pcall(function() Humanoid:EquipTool(tool) end)
    tool.Parent = Character
    waitx(0.05)
end

local function tryActivateTool(tool)
    if getgenv().CFG.TRY_ACTIVATE then pcall(function() tool:Activate() end) waitx(0.05) end
    if getgenv().CFG.TRY_FIRE_REMOTE_CHILDREN then
        for _,d in ipairs(tool:GetDescendants()) do
            if d.ClassName == "RemoteEvent" then
                local targetPos = HRP.Position + HRP.CFrame.LookVector * getgenv().CFG.CLICK_FORWARD_STUDS
                pcall(function() d:FireServer(targetPos) end)
                waitx(0.02)
            end
        end
    end
end

local function tryCenterClick()
    if not getgenv().CFG.TRY_CLICK_TAP then return end
    local x, y = screenCenter()
    clickAtScreen(x, y)
end

local function placeOne(tool)
    if not tool or not tool:IsA("Tool") then return false end
    equipTool(tool)
    tryActivateTool(tool)
    tryCenterClick()
    waitx(0.05)
    return true
end

local function dropPets()
    local key = getgenv().CFG.PET_KEYWORD
    local need = getgenv().CFG.MAX_TO_PLACE
    local placed = 0
    for _,it in ipairs(Backpack:GetChildren()) do
        if placed >= need then break end
        if it:IsA("Tool") and nameMatch(it.Name, key) then
            if placeOne(it) then
                placed += 1
                waitx(getgenv().CFG.BETWEEN_EACH)
            end
        end
    end
    print(("[PetUI] ĐÃ THẢ %d/%d \"%s\""):format(placed, need, key))
    return placed
end

-- ========= THU = PICK UP =========
local recallRemote = getgenv().CFG.RECALL_BANG_REMOTE and byPath(getgenv().CFG.RECALL_REMOTE_PATH) or nil
local pickupRemote = byPath(getgenv().CFG.PICKUP_REMOTE_PATH)

local function moveCloseTo(pos)
    if not getgenv().CFG.MOVE_CLOSE then return end
    local target = pos
    local dir = (target - HRP.Position).Unit
    local stop = target - dir * getgenv().CFG.MOVE_DISTANCE
    pcall(function() Humanoid:MoveTo(stop) end)
    Humanoid.MoveToFinished:Wait(2)
end

local function tryPickupWithPrompt(obj)
    if not getgenv().CFG.USE_PROXIMITY_PROMPT then return false end
    local ok = false
    for _,d in ipairs(obj:GetDescendants()) do
        if d:IsA("ProximityPrompt") then
            local isPick = nameMatch(d.ObjectText or d.ActionText or "", "pick") or nameMatch(d.Name, "pick")
            if isPick then
                -- nếu có fireproximityprompt (executor), dùng luôn
                local fpp = rawget(getfenv(), "fireproximityprompt") or fireproximityprompt
                if typeof(fpp) == "function" then
                    d.HoldDuration = 0
                    fpp(d)
                    ok = true
                    break
                else
                    -- không có fpp -> đứng sát rồi thử click lên obj
                    moveCloseTo(d.Parent:IsA("BasePart") and d.Parent.Position or obj:GetPivot().Position)
                    local pivot = obj:GetPivot().Position
                    local p2d, on = worldToScreen(pivot)
                    if on then clickAtScreen(p2d.X, p2d.Y) end
                    ok = true
                    break
                end
            end
        end
    end
    return ok
end

local function tryPickupWithClickDetector(obj)
    if not getgenv().CFG.USE_CLICKDETECTOR then return false end
    for _,d in ipairs(obj:GetDescendants()) do
        if d:IsA("ClickDetector") then
            local fcd = rawget(getfenv(), "fireclickdetector") or fireclickdetector
            if typeof(fcd) == "function" then
                fcd(d)
                return true
            else
                moveCloseTo(d.Parent:IsA("BasePart") and d.Parent.Position or obj:GetPivot().Position)
                local pos = d.Parent:IsA("BasePart") and d.Parent.Position or obj:GetPivot().Position
                local p2d, on = worldToScreen(pos)
                if on then clickAtScreen(p2d.X, p2d.Y) return true end
            end
        end
    end
    return false
end

local function tryPickupByRemote(obj)
    if not pickupRemote then return false end
    -- nhiều game yêu cầu truyền ID hoặc Instance; ta thử truyền Instance/pivot
    local ok = false
    local pivot = obj:GetPivot().Position
    pcall(function() pickupRemote:FireServer(obj) ok = true end)
    if not ok then pcall(function() pickupRemote:FireServer(pivot) ok = true end) end
    return ok
end

local function isCandidate(obj, key)
    if not obj then return false end
    -- Ưu tiên Model/Folder/BasePart được spawn khi đặt pet
    local n = obj.Name or ""
    if not nameMatch(n, key) then return false end
    -- chỉ xét trong bán kính
    local pos = (obj:IsA("Model") and obj:GetPivot().Position)
              or (obj:IsA("BasePart") and obj.Position)
              or nil
    if not pos then return false end
    local dist = (pos - HRP.Position).Magnitude
    return dist <= getgenv().CFG.PICKUP_RADIUS
end

local function enumerateCandidates()
    local key = getgenv().CFG.PICKUP_KEYWORD
    local list = {}
    for _,obj in ipairs(workspace:GetDescendants()) do
        if (obj:IsA("Model") or obj:IsA("BasePart")) and isCandidate(obj, key) then
            table.insert(list, obj:IsA("Model") and obj or obj) -- giữ nguyên
        end
    end
    -- sắp xếp theo khoảng cách tăng dần
    table.sort(list, function(a, b)
        local pa = (a:IsA("Model") and a:GetPivot().Position) or a.Position
        local pb = (b:IsA("Model") and b:GetPivot().Position) or b.Position
        return (pa - HRP.Position).Magnitude < (pb - HRP.Position).Magnitude
    end)
    return list
end

local function pickUpPets()
    -- Nếu game có remote recall hàng loạt, ưu tiên (user có thể bật lại trong CFG)
    if recallRemote then
        pcall(function() recallRemote:FireServer() end)
        print("[PetUI] ĐÃ GỌI RECALL REMOTE")
        return true
    end

    local want = getgenv().CFG.MAX_TO_PICK
    local picked = 0
    local cand = enumerateCandidates()

    for _,obj in ipairs(cand) do
        if picked >= want then break end

        -- 1) remote PickUpPet nếu có
        if tryPickupByRemote(obj) then
            picked += 1
            waitx(getgenv().CFG.BETWEEN_PICK)
            goto continue
        end

        -- 2) ProximityPrompt "Pick up"
        if tryPickupWithPrompt(obj) then
            picked += 1
            waitx(getgenv().CFG.BETWEEN_PICK)
            goto continue
        end

        -- 3) ClickDetector
        if tryPickupWithClickDetector(obj) then
            picked += 1
            waitx(getgenv().CFG.BETWEEN_PICK)
            goto continue
        end

        -- 4) bắn click vào vật thể (fallback)
        if getgenv().CFG.USE_SCREEN_CLICK then
            local pos = (obj:IsA("Model") and obj:GetPivot().Position) or obj.Position
            moveCloseTo(pos)
            local p2d, on = worldToScreen(pos)
            if on then
                clickAtScreen(p2d.X, p2d.Y)
                picked += 1
                waitx(getgenv().CFG.BETWEEN_PICK)
                goto continue
            end
        end

        ::continue::
    end

    print(("[PetUI] ĐÃ NHẶT (PICK UP) %d/%d \"%s\""):format(picked, want, getgenv().CFG.PICKUP_KEYWORD))
    return picked
end

-- ========= UI =========
local sg = Instance.new("ScreenGui")
sg.Name = "PetTwoButtonsUI"
sg.ResetOnSpawn = false
sg.IgnoreGuiInset = true
sg.Parent = PlayerGui

local frame = Instance.new("Frame", sg)
frame.Name = "Dock"
frame.AnchorPoint = Vector2.new(1,1)
frame.Position = UDim2.new(1, -16, 1, -140)
frame.Size = UDim2.new(0, 170, 0, 100)
frame.BackgroundColor3 = Color3.fromRGB(28, 28, 33)
local uic = Instance.new("UICorner", frame); uic.CornerRadius = UDim.new(0, 14)
local stroke = Instance.new("UIStroke", frame); stroke.Thickness = 1; stroke.Transparency = 0.25
local pad = Instance.new("UIPadding", frame); pad.PaddingTop = UDim.new(0,10); pad.PaddingBottom = UDim.new(0,10); pad.PaddingLeft = UDim.new(0,10); pad.PaddingRight = UDim.new(0,10)

local list = Instance.new("UIListLayout", frame)
list.FillDirection = Enum.FillDirection.Vertical
list.Padding = UDim.new(0, 10)
list.HorizontalAlignment = Enum.HorizontalAlignment.Center
list.VerticalAlignment = Enum.VerticalAlignment.Center

local function makeBtn(txt, color3)
    local b = Instance.new("TextButton")
    b.Size = UDim2.new(1, 0, 0, 36)
    b.Text = txt
    b.Font = Enum.Font.GothamBold
    b.TextSize = 16
    b.TextColor3 = Color3.fromRGB(255,255,255)
    b.BackgroundColor3 = color3 or Color3.fromRGB(55,115,255)
    local c = Instance.new("UICorner", b); c.CornerRadius = UDim.new(0, 10)
    local s = Instance.new("UIStroke", b); s.Thickness = 1; s.Transparency = 0.3
    return b
end

local btnDrop = makeBtn("THẢ (Moon Cat)")
local btnPick = makeBtn("THU = PICK UP", Color3.fromRGB(245,90,90))
btnDrop.Parent = frame
btnPick.Parent = frame

-- Drag
local dragging, dragStart, startPos = false, nil, nil
frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType==Enum.UserInputType.Touch then
        dragging = true; dragStart = input.Position; startPos = frame.Position
        input.Changed:Connect(function() if input.UserInputState == Enum.UserInputState.End then dragging = false end end)
    end
end)
UIS.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType==Enum.UserInputType.MouseMovement or input.UserInputType==Enum.UserInputType.Touch) then
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Debounce
local busy = false
local function withBusy(fn)
    if busy then return end
    busy = true
    task.spawn(function()
        local ok, err = pcall(fn)
        if not ok then warn("[PetUI] Error:", err) end
        busy = false
    end)
end

btnDrop.MouseButton1Click:Connect(function() withBusy(dropPets) end)
btnPick.MouseButton1Click:Connect(function() withBusy(pickUpPets) end)

print("[PetUI] Sẵn sàng. THẢ = đặt Moon Cat, THU = Pick up Moon Cat quanh bạn.")
